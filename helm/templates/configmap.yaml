{{- $chartName := include "sync-worker.name" . -}}
{{- $tracingUrl := include "sync-worker.tracingUrl" . -}}
{{- $metricsUrl := include "sync-worker.metricsUrl" . -}}
{{- if .Values.enabled -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-{{ $chartName }}-configmap
data:
  REQUEST_PAYLOAD_LIMIT: {{ .Values.env.requestPayloadLimit | quote }}
  RESPONSE_COMPRESSION_ENABLED: {{ .Values.env.responseCompressionEnabled | quote }}
  LOG_LEVEL: {{ .Values.env.logLevel | quote }}
  LOG_PRETTY_PRINT_ENABLED: {{ .Values.env.logPrettyPrintEnabled | quote }}
  {{ if .Values.env.tracing.enabled }}
  TELEMETRY_TRACING_ENABLED: 'true'
  TELEMETRY_TRACING_URL: {{ $tracingUrl }}
  {{ end }}
  {{ if .Values.env.metrics.enabled }}
  TELEMETRY_METRICS_ENABLED: 'true'
  TELEMETRY_METRICS_URL: {{ $metricsUrl }}
  {{ end }}
  LAYER_SPEC_BASE_URL: {{ .Values.env.layerSpecBaseUrl | quote }}
  NIFI_BASE_URL: {{ .Values.env.nifiBaseUrl | quote }}
  SYNC_ATTEMPTS: {{ .Values.env.syncAttempts | quote }}
  GATEWAY_URL: {{ .Values.env.gatewayUrl | quote }}
  GATEWAY_IMAGE_ROUTE_ID: {{ .Values.env.gatewayImageRouteId | quote }}
  GATEWAY_JSON_ROUTE_ID: {{ .Values.env.gatewayJsonRouteId | quote }}
  TILES_PATH: {{ .Values.env.tiles.path | quote }}
  TILES_UPLOAD_BATCH_SIZE: {{ .Values.env.tiles.uploadBatchSize | quote }}
  TILES_SIG_IS_NEEDED: {{ .Values.env.tiles.sigIsNeeded | quote }}
  QUEUE_JOB_MANAGER_BASE_URL: {{ .Values.env.queue.jobManagerBaseUrl | quote }}
  QUEUE_HEART_BEAT_MANAGER_BASE_URL: {{ .Values.env.queue.heartbeatManagerBaseUrl | quote }}
  QUEUE_DEQUEUE_INTERVAL_MS: {{ .Values.env.queue.dequeueIntervalMs | quote }}
  QUEUE_HEART_BEAT_INTERVAL_MS: {{ .Values.env.queue.heartbeatIntervalMs | quote }}
  QUEUE_JOB_TYPE: {{ .Values.env.queue.jobType | quote }}
  QUEUE_TILES_TASK_TYPE: {{ .Values.env.queue.tilesTaskType | quote }}
  QUEUE_TOC_TASK_TYPE: {{ .Values.env.queue.tocTaskType | quote }}
  STORAGE_PROVIDER: {{ .Values.env.storageProvider | quote }}
  USE_STREAMS: {{ .Values.env.useStreams | quote }}
  S3_ENDPOINT: {{ .Values.env.S3.endpoint | quote }}
  S3_BUCKET: {{ .Values.env.S3.bucket | quote }}
  S3_FORCE_PATH_STYLE: {{ .Values.env.S3.forcePathStyle | quote }}
  {{- if .Values.env.tiles.sigIsNeeded }}
  {{ $globdata := .Files.Glob .Values.env.crypto.pem }}
  {{ if $globdata }}
  PRIVATE_KEY: {{ tpl (.Files.Get .Values.env.crypto.pem) . | quote }}
  {{ else }}
  {{- fail  (printf "Key file not found at path: %s" .Values.env.crypto.pem) }}
  {{- end }}
  {{- end }}
{{- end }}
