{{- $releaseName := .Release.Name -}}
{{- $chartName := include "sync-worker.name" . -}}
{{- $cloudProviderFlavor := include "sync-worker.cloudProviderFlavor" . -}}
{{- $cloudProviderDockerRegistryUrl := include "sync-worker.cloudProviderDockerRegistryUrl" . -}}
{{- $imageTag := include "sync-worker.tag" . -}}

{{- if .Values.enabled -}}

{{ $caSecretName := ternary .Values.authentication.ca.externalSecretName (printf "%s%s" .Release.Name "-root-ca") .Values.authentication.ca.useExternal }}
{{ $sslSecretName := ternary .Values.authentication.ssl.externalSecretName (printf "%s%s" .Release.Name "-open-ssl") .Values.authentication.ssl.useExternal }}

{{- if .Values.authentication.ca.enabled }}
{{- if and .Values.authentication.ca.useExternal (not .Values.authentication.ca.externalSecretName) }}
{{- fail "When using external ca secret the value for .Values.authentication.ca.externalSecretName should be set" }}
{{- end }}
{{- end }}

{{- if .Values.authentication.ssl.enabled }}
{{- if and .Values.authentication.ssl.useExternal (not .Values.authentication.ssl.externalSecretName) }}
{{- fail "When using external ssl secret the value for .Values.authentication.ssl.externalSecretName should be set" }}
{{- end }}
{{- end }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $releaseName }}-{{ $chartName }}
  labels:
    app: {{ $chartName }}
    component: {{ $chartName }}
    environment: {{ include "sync-worker.environment" . }}
    release: {{ $releaseName }}
    {{- include "sync-worker.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ $chartName }}
      release: {{ $releaseName }}
      run: {{ $releaseName }}-{{ $chartName }}
      {{- include "sync-worker.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ $chartName }}
        release: {{ $releaseName }}
        run: {{ $releaseName }}-{{ $chartName }}
        {{- include "sync-worker.selectorLabels" . | nindent 8 }}
    spec:
    {{- if .Values.cloudProvider.imagePullSecretName }}
      imagePullSecrets:
        - name: {{ .Values.cloudProvider.imagePullSecretName | quote }}
    {{- end }}
      volumes:
      {{- if .Values.authentication.ca.enabled }}
      - name: root-ca
        secret:
          secretName: {{ $caSecretName }}
      {{- end }}
      {{- if .Values.authentication.ssl.enabled }}
      - name: open-ssl
        secret:
          secretName: {{ $sslSecretName }}
      {{- end }}
    {{- if eq (upper .Values.env.storageProvider) "FS" }}
      - name: sources-storage
        persistentVolumeClaim:
          claimName: {{ .Values.storage.internalPvc.name }}
    {{- end }}
    {{- if .Values.env.tiles.sigIsNeeded }}
      - name: key-file
        secret:
          secretName: {{ .Values.gateway.secret.name }}
          items:
          - key: "PRIVATE_KEY"
            path: "private_key.pem"
    {{- end }}
      containers:
        - name: {{ $releaseName }}-{{ $chartName }}-deployment
          {{- with .Values.image }}
          image: {{ $cloudProviderDockerRegistryUrl }}{{ .repository }}:{{ $imageTag }}
          {{- end }}
          env:
            - name: SERVER_PORT
              value: {{ .Values.env.targetPort | quote }}
            {{- if .Values.authentication.ca.enabled }}
            - name: REQUESTS_CA_BUNDLE
              value: '/usr/local/share/ca-certificates/ca.crt'
            - name: NODE_EXTRA_CA_CERTS
              value: "[/usr/local/share/ca-certificates/ca.crt]"
            {{- end }}
            {{- if eq (upper .Values.env.storageProvider) "S3" }}
            - name: S3_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.env.S3.secret.name }}
                  key: accessKeyId
            - name: S3_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.env.S3.secret.name }}
                  key: secretAccessKey
            {{- end }}
            {{- if .Values.env.gateway.auth.enabled }}
            - name: GATEWAY_AUTH_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.gateway.secret.name }}
                  key: username
            - name: GATEWAY_AUTH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.gateway.secret.name }}
                  key: password
            {{- end }}
            - name: CRYPTO_PEM
              value: "/usr/src/app/private_key.pem"
          envFrom:
            - configMapRef:
                name: {{ $releaseName }}-{{ $chartName }}-configmap
          ports:
            - name: http
              containerPort: {{ .Values.env.targetPort }}
              protocol: {{ .Values.env.protocol }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.initialDelaySeconds }}
            httpGet:
              path: /liveness
              port: http
          volumeMounts: 
            {{- if .Values.authentication.ca.enabled }}
            - name: root-ca
              mountPath: "/usr/local/share/ca-certificates"
            {{- end }}
            {{- if .Values.authentication.ssl.enabled }}
            - name: open-ssl
              mountPath: "/etc/ssl/openssl.cnf"
              subPath: "openssl.cnf"
            {{- end }}
          {{- if or (eq (upper .Values.env.storageProvider) "FS") .Values.env.tiles.sigIsNeeded }}
          {{- if eq (upper .Values.env.storageProvider) "FS" }}
            - name: sources-storage
              mountPath: {{ .Values.storage.internalPvc.mountPath }}
              subPath: tiles
          {{- end }}
          {{- if .Values.env.tiles.sigIsNeeded }}
            - mountPath: "/usr/src/app/private_key.pem"
              name: key-file
              subPath: private_key.pem
          {{- end }}
          {{- end }}
          {{- if .Values.resources.enabled }}
          resources:
            {{- toYaml .Values.resources.value | nindent 12 }}
          {{- end }}
{{- end -}}
