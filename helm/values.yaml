global:
  cloudProvider: {}
  tracing: {}
  metrics: {}
  environment: {}

authentication:
  ca:
    enabled: false
    useExternal: false
    externalSecretName: ""
  ssl:
    enabled: false
    useExternal: false
    externalSecretName: ""

# ====================================================================================================
# Local certificate files variables
# ====================================================================================================

local:
  certs:
    ca: "certs/ca.crt"
    ssl: "certs/openssl.cnf"

enabled: true
environment: "development"
replicaCount: 1
initialDelaySeconds: 60
nodePort: 30030 #for minikube deployment only
resetOnConfigChange: true

cloudProvider:
  dockerRegistryUrl: "my-registry"
  imagePullSecretName: "my-registry-secret"
  flavor: "openshift"

image:
  repository: "sync-worker"
  tag: "latest"

storage:
  internalPvc:
    create: false
    name: "internal-pvc"
    mountPath: "/layerSources"
  internalPv:
    name: "internal-pv"
    directory: "/layerSources"

gateway:
  secret: 
    create: false # secret should be created on higher level for deployments with multiple services
    name: gateway-basic-auth-secret

env:
  port: 8089
  targetPort: 8089
  protocol: TCP
  logLevel: warn
  logPrettyPrintEnabled: false
  responseCompressionEnabled: true
  requestPayloadLimit: 1mb
  tracing:
    enabled: false
    url: "http://localhost:55681/v1/trace"
  metrics:
    enabled: false
    url: "http://localhost:55681/v1/metrics"
  layerSpecBaseUrl: "http://localhost:8080"
  nifiBaseUrl: "http://localhost:8083"
  syncAttempts: 3
  gateway:
    url: 'http://localhost:8084'
    imageRouteId: ''
    jsonRouteId: ''
    auth:
      enabled: false
      username: ''
      password: ''
  tiles:
    path: ''
    format: png
    uploadBatchSize: 100
    sigIsNeeded: true
  crypto:
    readFileEncoding: ""
    pem: "path/to/key/file"
    algoritm: ""
    shaSize: ""
  queue:
    jobManagerBaseUrl: "http://localhost:8082"
    heartbeatManagerBaseUrl: "http://localhost:8085"
    dequeueIntervalMs: 1000
    heartbeatIntervalMs: 300
    jobType: "Sync"
    tilesTaskType: "tilesSync"
    tocTaskType: "tocSync"
  storageProvider: "S3"
  useStreams: true
  S3:
    endpoint: "http://localhost:9000"
    bucket: "mapping-images"
    forcePathStyle: true
    sslEnabled: true
    secret:
      name: raster-tiles-s3-secret
      createSecret: false # secret should be created on higher level for deployments with multiple services
      accessKeyId: '' # used only when creating secret
      secretAccessKey: '' # used only when creating secret
resources:
  enabled: true
  value:
    limits:
      cpu: "100m"
      memory: "128Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"

